cmake_minimum_required(VERSION 3.0)
# set(CMAKE_C_COMPILER "/usr/local/bin/mpicc")
# set(CMAKE_C_COMPILER "/usr/local/bin/clang")
# set(CMAKE_CXX_COMPILER "/usr/local/bin/clang++")
# set(CMAKE_C_COMPILER "/usr/bin/aarch64-linux-gnu-gcc")
# set(CMAKE_CXX_COMPILER "/usr/bin/aarch64-linux-gnu-g++")
project(vector-sum LANGUAGES CXX)
set(CMAKE_INCLUDE_CURRENT_DIR on)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_BUILD_TYPE Release)
# set(CMAKE_BUILD_TYPE Debug)
# set(CMAKE_CXX_FLAGS "-Wall -march=armv8-a")
set(CMAKE_CXX_FLAGS "-Wall -march=native")
# set(CMAKE_CXX_FLAGS "-Wall")
set(CMAKE_CXX_FLAGS_RELEASE "-O3")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY bin)
include_directories(inc)
link_directories(lib)
add_library(main SHARED src/main.cc)
add_library(solve SHARED src/solve.cc)
add_executable(gen-data src/gen-data.cc)
add_executable(ordinary src/ordinary.cc)
# add_executable(arm-neon-unaligned src/arm-neon-unaligned.cc)
# add_executable(arm-neon-aligned src/arm-neon-aligned.cc)
add_executable(x86-sse-unaligned src/x86-sse-unaligned.cc)
add_executable(x86-sse-aligned src/x86-sse-aligned.cc)
add_executable(x86-avx-unaligned src/x86-avx-unaligned.cc)
add_executable(x86-avx-aligned src/x86-avx-aligned.cc)
target_link_libraries(ordinary main solve)
# target_link_libraries(arm-neon-unaligned main solve)
# target_link_libraries(arm-neon-aligned main solve)
target_link_libraries(x86-sse-aligned main solve)
target_link_libraries(x86-sse-unaligned main solve)
target_link_libraries(x86-avx-aligned main solve)
target_link_libraries(x86-avx-unaligned main solve)
